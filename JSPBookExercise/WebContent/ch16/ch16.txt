1. JDBC를 사용하여 JSP와 데이터베이스를 연동하는 기법을 단계별로 설명하시오
	1) java.sql.* 패키지 임포트
	2) JDBC드라이버로딩
	3) 데이터베이스 접속을 위한  Connection객체 생성
	4) 쿼리문을 실행하기 위한 Statement/PreparedStatement/CallableStatement객체 생성
	5) 쿼리실행
	6) 쿼리 실행의 결과 값(int,ResultSet)사용
	7) 사용된 객체(ResultSet, Statement/PreparedStatement/CallableStatement, Connection)종료
	



2. JDBC 드라이버 로딩 및 DBMS 접속 기법을 예를들어 설명하시오

1) JDBC 드라이버 로딩 단계에서는 드라이버 인터페이스를 구현하는 작업으로  Class.forName()메소드를 이용하여
	JDBC 드라이버를 로딩합니다. JDBC드라이버가 로딩되면 자동으로 객체가 생성되고 DriverManager클래스에 등록됩니다
	
2) JDBC 드라이버에서 데이터베이스와 연결된 커넥션을 가져오기 위해 DriverManager클래스의 getConnection()메소드를 사용합니다.
	
3) 데이터베이스 연결이 더 이상 필요하지 않으면 데이터베이스와 JDBC 리소스가 자동으로 닫힐때 깢 ㅣ대기하는 것이 아니라 
	close() 메소드로 Connection객체를 해제합니다





3. 데이터베이스 쿼리를 실행하는 Statement 객체와 PreparedStatement 객체의 차이점을
	설명하시오
	1) Statement 객체를 사용하는경우 
		ResultSet executeQuery(String sql) throws SQLException
		Statement 객체는 정적인 쿼리에 사용한다. 하나의 쿼리를 사용하고 나면 더이상 사용할 수 없고
		하나의 쿼리를 끝내면 close()를 사용하여 객체를 즉시 해제해야 한다.
		그렇지 않으면 무시할수 없는 공간을 필요로하며 페이지가 다른 작업을 수행하는 동안 멈추지않는다
		Statement 객체는 복잡하지 않은 간단한 쿼리문을 사용하는 경우에 좋다.
		executeQuery()나 executeUpdate()메소드를 호출하여 쿼리문을 실행
		executeQuery는 ResultSet 을반환하고 select 문을 실행할때 사용
		executeUpdate 반환유형은 int 삽입,수정,삭제 관련된 sql문 실행할때 사용
		close(); 는 void반환 Statement객체를 반환할때 사용
		
		
		
		
	2) PreparedStatement 객체를 사용하는 경우
		ResultSet executeQuery() throws SQLException
		
		동적인 쿼리에 사용함.